@precedence {
  highest @left,
  methodEqual @left,
  union @left,
  else @right,
  member,
  call,
  prefix,
  times @left,
  plus @left,
  range @left,
  shift @left,
  loop,
  rel @left,
  is @left,
  equal @left,
  bitOr @left,
  bitXor @left,
  bitAnd @left,
  and @left,
  or @left,
  ternary @right,
  assign @right,
  comma @left,
  statement @cut,
  forImport @left,
  forLoop @left
}

@top Script { statement+ }

// as break class construct continue else false for foreign if import
// in is null return static super this true var while

statement[@isGroup=Statement] {
  ImportDeclaration |
  ForStatement { !forLoop kw<"for"> (ForInSpec ) statement } |
  WhileStatement { kw<"while"> ParenthesizedExpression statement } |
  IfStatement { kw<"if"> ParenthesizedExpression statement (!else kw<"else"> statement)? } |
  ReturnStatement { kw<"return"> } |
  BreakStatement { kw<"break"> } |
  ContinueStatement { kw<"continue"> } |
  Block |
  declaration |
  ExpressionStatement { expression }
}

declaration {
  ClassDeclaration |
  VariableDeclaration
}

ImportDeclaration {
  kw<"import"> String (!forImport kw<"for"> ImportName ( "," ImportName)*)?
}

ImportName {
  VariableDefinition (ckw<"as"> VariableDefinition)?
}

forXSpec<op> {
  "("
  VariableName
  !loop op expression
  ")"
}

ForInSpec { forXSpec<kw<"in">> }


ClassDeclaration {
  // TODO:should this be kwMod or pkwMod?
  kw<"foreign">? !statement kw<"class"> ClassName
  (kw<"is"> ClassName)?
  ClassBody
}

ClassBody {
  "{" (MethodDeclaration )* "}"
}

MethodDeclaration[group=ClassItem] {
  pkwMod<"static">?
  pkwMod<"foreign">?
  pkwMod<"construct">?
  ClassMethodName
  functionSignature?
  Block
}

VariableDeclaration {
  kw<"var"> VariableDefinition ("=" expressionNoComma)?
}



// pattern { VariableDefinition | ArrayPattern | ObjectPattern }

// ArrayPattern { "[" commaSep<patternAssign> ~destructure "]" }

// ObjectPattern { "{" commaSep<PatternProperty> ~destructure "}" }

// patternAssign {
//   pattern ("=" expressionNoComma)?
// }

ParamList {
  "(" commaSep<VariableDefinition> ")"
}

Block {
  !statement "{" statement* "}"
}

BlockMaybeArgs {
  !statement "{" BlockArgs? statement* "}"
}

BlockArgs {
  "|" commaSep<VariableName> "|"
}

expression[@isGroup=Expression] {
  expressionNoComma | SequenceExpression
}

SequenceExpression {
  expressionNoComma !comma ("," expressionNoComma)+
}

expressionNoComma {
  Number |
  String |
  VariableName |
  boolean |
  kw<"this"> |
  kw<"null"> |
  kw<"super"> |
  ArrayExpression |
  ObjectExpression { "{" commaSep<Property> ~destructure "}" } |
  UnaryExpression |
  ParenthesizedExpression |
  MemberExpression |
  BinaryExpression |
  ConditionalExpression { expressionNoComma !ternary questionOp expressionNoComma LogicOp<":"> expressionNoComma } |
  AssignmentExpression |
  // Blah {
  //   ClassName !highest "." VariableName "(" ")"
  // } |
  CallExpression {
    // expressionNoComma !call ArgList
    expressionNoComma !call ArgList BlockMaybeArgs? |
    expressionNoComma !call BlockMaybeArgs
  }
}

MemberExpression {
  expressionNoComma !member ("." PropertyName | "[" expression "]")
}

AssignmentExpression {
  // FieldName !assign "=" expressionNoComma |
  (VariableName | MemberExpression) !assign "=" expressionNoComma
}

ParenthesizedExpression { "(" expression ")" }

ArrayExpression {
  "[" commaSep1<expressionNoComma | ""> ~destructure "]"
}

propName { PropertyNameDefinition | "[" expression "]" | Number | String }

Property {
  expressionNoComma ~destructure (":" expressionNoComma)?
}

PatternProperty {
  (PropertyName | Number | String) ~destructure (":" pattern)? ("=" expressionNoComma)?
}

functionSignature { ParamList  }

// https://wren.io/syntax.html#precedence-and-associativity
UnaryExpression {
  !prefix (LogicOp<"!"> | BitOp<"~"> | ArithOp<"+" | "-">)
  expressionNoComma
}

BinaryExpression {
  expressionNoComma !times (divide | ArithOp<"%"> | ArithOp<"*">) expressionNoComma |
  expressionNoComma !plus ArithOp<"+" | "-"> expressionNoComma |
  expressionNoComma !range RangeOp<".." | "..."> expressionNoComma |
  expressionNoComma !shift BitOp<">>" | "<<"> expressionNoComma |
  expressionNoComma !bitAnd BitOp { "&" } expressionNoComma |
  expressionNoComma !bitXor BitOp<"^"> expressionNoComma |
  expressionNoComma !bitOr BitOp { "|" } expressionNoComma |
  expressionNoComma !rel (LessThan | CompareOp<"<=" | ">" "="?>) expressionNoComma |
  expressionNoComma !is kw<"is"> expressionNoComma |
  expressionNoComma !equal CompareOp<"==" | "!="> expressionNoComma |
  expressionNoComma !and LogicOp<"&&"> expressionNoComma |
  expressionNoComma !or LogicOp<"||"> expressionNoComma
}

// FieldName {
//   "_" identifier
// }

ArgList {
  "(" commaSep<expressionNoComma> ")"
}

commaSep<content> {
  "" | content ("," content?)*
}

commaSep1<content> {
  content ("," content)*
}

// Keywords

kw<term> { @specialize[@name={term}]<identifier, term> }

// Contextual keywords

ckw<term> { @extend[@name={term}]<identifier, term> }

// Contextual keyword in property context

pkwMod<term> { @extend[@name={term}]<word, term> }

boolean { @specialize[@name=BooleanLiteral]<identifier, "true" | "false"> }

VariableName { identifier ~arrow }

ClassName { uppercaseWord }

VariableDefinition { identifier ~arrow }

PropertyName { word }

ClassMethodName { word !methodEqual "="? |
  "+" | "-" | "*" | divide |
  "%" | "<" "="? | ">" "="? |
  "==" | "!=" | "&" | "|" |
  "!" | "~" | "-"
}

PropertyNameDefinition { word }

questionOp[@name=LogicOp] { "?" }

@skip { whitespace | LineComment | BlockComment }

@tokens {
  whitespace { std.whitespace+ }

  LineComment { "//" ![\n]* }

  BlockComment { "/*" blockCommentRest }

  blockCommentRest { BlockComment2 | ![*] blockCommentRest | "*" blockCommentAfterStar }

  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  BlockComment2 { "/*" blockComment2Rest }

  blockComment2Rest { ![*] blockComment2Rest | "*" blockComment2AfterStar  }

  blockComment2AfterStar { "/" blockCommentRest | "*" blockComment2AfterStar | ![/*] blockComment2Rest }

  divide[@name=ArithOp] { "/" }

  @precedence { BlockComment, LineComment, divide }

  identifierChar { std.asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  uppercaseChar { std.asciiUppercase }

  uppercaseWord { uppercaseChar (identifierChar | std.digit)* }

  word { identifierChar (identifierChar | std.digit)* }

  identifier { word }

  @precedence { identifier, whitespace }

  @precedence { word, whitespace }

  // @precedence { uppercaseWord, identifier }
  // @precedence { uppercaseWord, word }
  @precedence { ".", Number }

  Number {
    (std.digit (std.digit)* ("." (std.digit)*)? | "." std.digit (std.digit)*)
      (("e" | "E") ("+" | "-")? (std.digit)+)? |
    "0x" (std.digit | $[a-fA-F])+
    // "0b" $[01_]+ |
    // "0o" $[0-7_]+
  }

  String {
    '"' (![\\\n"] | "\\" _)* '"'? |
    '"""' (_)* '"""'
  }

  RangeOp<expr> { expr }
  ArithOp<expr> { expr }
  LogicOp<expr> { expr }
  BitOp<expr> { expr }
  CompareOp<expr> { expr }

  LessThan[@name=CompareOp] { "<" }

  "="[@name=Equals]

  "(" ")" "[" "]" "{" "}"

  "." "," ":" "|"
}

// @external tokens insertSemicolon from "./tokens" { insertSemi }

@detectDelim
